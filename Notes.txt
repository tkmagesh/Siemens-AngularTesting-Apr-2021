Name
Primary Skillset
Experience in Angular
Experience in Angular Testing

Magesh Kuppan

Why Angular?
    Helps you build maintainable application

maintainable = Easily Testable

Angular Building Blocks
    Module
        Registry of application entities
        Dependency Injection

    Component
        Presentation (html + css) + User Interaction + State
        Sync the state changes with the UI
        (Should behave like a 'reception office')

    Directive
        DOM manipulation

    Pipe
        Data transformation for Presentation

    Service
        Non UI responsibilities


    const comp : CalculatorComponent = new CalculatorComponent()
    const currencyPipe : CurrencyPipe = new CurrencyPipe()

$('#btnAdd').click(() => {
    const result = parseInt($('#txtN1').val()) + parseInt($('#txtN2').val())
    $('#divResult').html(result)
})

$('#btnSubtract').click(() => {
    const result = parseInt($('#txtN1').val()) - parseInt($('#txtN2').val())
    $('#divResult').html(result)
})

$('#btnMultiply').click(() => {
    const result = parseInt($('#txtN1').val()) * parseInt($('#txtN2').val())
    $('#divResult').html(result)
})

$('#btnDivide').click(() => {
    const result = parseInt($('#txtN1').val()) / parseInt($('#txtN2').val())
    $('#divResult').html(result)
})

http://github.com/tkmagesh/Siemens-AngularTesting-Apr-2021

SOLID Principles
    SRP - Single Responsibility Principles
        There should be only one reason to change the entity

    OCP - Open Closed Principle
        The entities should be created in such a way that they are 'Open' for extension and 'Closed' for modification

    LSP - Liskov's Substitution Principle
    ISP - Interface Segregation Principles
    DIP - Dependency Inversion Principle
        Dependencies should not be created and used in the same place
        Dependency creation should be separated from usage

Excluding tests
    xdescribe
    xit
Execute all tests
    describe
    it
Focus on some tests
    fdescribe
    fit

Using moment
npm install moment
import * as moment from 'moment'
moment('....').fromNow()